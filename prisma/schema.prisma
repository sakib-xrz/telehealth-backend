generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
  FEMALE
}

enum BloodGroup {
  A_POSITIVE
  B_POSITIVE
  O_POSITIVE
  AB_POSITIVE
  A_NEGATIVE
  B_NEGATIVE
  O_NEGATIVE
  AB_NEGATIVE
}

enum MaritalStatus {
  MARRIED
  UNMARRIED
}

enum AppointmentStatus {
  SCHEDULED
  INPROGRESS
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PAID
  UNPAID
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole
  needPasswordChange Boolean    @default(false)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin?
  doctor             Doctor?
  patient            Patient?

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?  @default("https://res.cloudinary.com/dwcb6qft9/image/upload/v1724704575/user/default/default_user_zl3dmh.jpg")
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email], onDelete: Cascade)

  @@map("admins")
}

model Doctor {
  id                  String   @id @default(uuid())
  name                String
  email               String   @unique
  profilePhoto        String?  @default("https://res.cloudinary.com/dwcb6qft9/image/upload/v1724704575/user/default/default_user_zl3dmh.jpg")
  contactNumber       String
  address             String?  @default("")
  registrationNumber  String
  experience          Int?     @default(0)
  gender              Gender
  appointmentFee      Int      @default(0)
  qualification       String
  currentWorkingPlace String?  @default("")
  designation         String?  @default("")
  isDeleted           Boolean  @default(false)
  averageRating       Float    @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user              User              @relation(fields: [email], references: [email], onDelete: Cascade)
  doctorSpecialties DoctorSpecialty[]
  doctorSchedules   DoctorSchedules[]
  appointment       Appointment[]
  prescription      Prescription[]
  review            Review[]

  @@map("doctors")
}

model Patient {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?  @default("https://res.cloudinary.com/dwcb6qft9/image/upload/v1724704575/user/default/default_user_zl3dmh.jpg")
  contactNumber String
  address       String?  @default("")
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user              User               @relation(fields: [email], references: [email], onDelete: Cascade)
  patientHealthData PatientHealthData?
  medicalReport     MedicalReport[]
  appointment       Appointment[]
  prescription      Prescription[]
  review            Review[]

  @@map("patients")
}

model Specialties {
  id                String            @id @default(uuid())
  title             String
  icon              String            @default("https://res.cloudinary.com/dwcb6qft9/image/upload/v1725102873/specialties/Default_xfr8sp.png")
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  doctorSpecialties DoctorSpecialty[]

  @@map("specialties")
}

model DoctorSpecialty {
  doctorId      String
  specialtiesId String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  doctor      Doctor      @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  specialties Specialties @relation(fields: [specialtiesId], references: [id], onDelete: Cascade)

  @@id([doctorId, specialtiesId])
  @@map("doctor_specialties")
}

model PatientHealthData {
  id                  String        @id @default(uuid())
  patientId           String        @unique
  gender              Gender
  dateOfBirth         String
  bloodGroup          BloodGroup
  hasAllergies        Boolean?      @default(false)
  hasDiabetes         Boolean?      @default(false)
  height              String
  weight              String
  smokingStatus       Boolean?      @default(false)
  dietaryPreferences  String?
  pregnancyStatus     Boolean?      @default(false)
  mentalHealthHistory String?
  immunizationStatus  String?
  hasPastSurgeries    Boolean?      @default(false)
  recentAnxiety       Boolean?      @default(false)
  recentDepression    Boolean?      @default(false)
  maritalStatus       MaritalStatus @default(UNMARRIED)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("patient_health_datas")
}

model MedicalReport {
  id         String   @id @default(uuid())
  patientId  String
  reportName String
  reportLink String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("medical_reports")
}

model Schedule {
  id              String            @id @default(uuid())
  startDateTime   DateTime
  endDateTime     DateTime
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  doctorSchedules DoctorSchedules[]
  appointment     Appointment?

  @@map("schedules")
}

model DoctorSchedules {
  doctorId      String
  scheduleId    String
  isBooked      Boolean? @default(false)
  appointmentId String?  @unique

  doctor      Doctor       @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  schedule    Schedule     @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  appointment Appointment? @relation(fields: [appointmentId], references: [id], onDelete: SetNull)

  @@id([doctorId, scheduleId])
  @@map("doctor_schedules")
}

model Appointment {
  id             String            @id @default(uuid())
  patientId      String
  doctorId       String
  scheduleId     String            @unique
  videoCallingId String
  status         AppointmentStatus @default(SCHEDULED)
  paymentStatus  PaymentStatus     @default(UNPAID)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  patient         Patient          @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor          Doctor           @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  schedule        Schedule         @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  doctorSchedules DoctorSchedules?
  payment         Payment?
  prescription    Prescription?
  review          Review?

  @@map("appointments")
}

model Payment {
  id                 String        @id @default(uuid())
  appointmentId      String        @unique
  amount             Float
  transactionId      String        @unique
  status             PaymentStatus @default(UNPAID)
  paymentGatewayData Json?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Prescription {
  id            String    @id @default(uuid())
  appointmentId String    @unique
  doctorId      String
  patientId     String
  medicines     Json
  tests         Json
  followUpDate  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  doctor      Doctor      @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient     Patient     @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("prescriptions")
}

model Review {
  id            String   @id @default(uuid())
  appointmentId String   @unique
  patientId     String
  doctorId      String
  rating        Float
  comment       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  appointment Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  patient     Patient     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor      Doctor      @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("reviews")
}
