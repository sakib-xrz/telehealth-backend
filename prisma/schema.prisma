generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  DOCTOR
  PATIENT
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole
  needPasswordChange Boolean    @default(false)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin?
  doctor             Doctor?
  patient            Patient?

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?  @default("https://res.cloudinary.com/dwcb6qft9/image/upload/v1724704575/user/default/default_user_zl3dmh.jpg")
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email], onDelete: Cascade)

  @@map("admins")
}

model Doctor {
  id                  String   @id @default(uuid())
  name                String
  email               String   @unique
  profilePhoto        String?  @default("https://res.cloudinary.com/dwcb6qft9/image/upload/v1724704575/user/default/default_user_zl3dmh.jpg")
  contactNumber       String
  address             String?  @default("")
  registrationNumber  String
  experience          Int?     @default(0)
  gender              Gender
  appointmentFee      Int      @default(0)
  qualification       String
  currentWorkingPlace String?  @default("")
  designation         String?  @default("")
  isDeleted           Boolean  @default(false)
  averageRating       Float    @default(0)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user            User              @relation(fields: [email], references: [email], onDelete: Cascade)
  doctorSpecialty DoctorSpecialty[]

  @@map("doctors")
}

model Patient {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?  @default("https://res.cloudinary.com/dwcb6qft9/image/upload/v1724704575/user/default/default_user_zl3dmh.jpg")
  contactNumber String
  address       String?  @default("")
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email], onDelete: Cascade)

  @@map("patients")
}

model Specialties {
  id        String   @id @default(uuid())
  title     String
  icon      String   @default("https://res.cloudinary.com/dwcb6qft9/image/upload/v1725102873/specialties/Default_xfr8sp.png")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  doctorSpecialty DoctorSpecialty[]

  @@map("specialties")
}

model DoctorSpecialty {
  doctorId    String
  specialtyId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  doctor    Doctor      @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  specialty Specialties @relation(fields: [specialtyId], references: [id], onDelete: Cascade)

  @@id([doctorId, specialtyId])
  @@map("doctor_specialties")
}
